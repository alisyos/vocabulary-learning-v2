'use client';

import { useState, useEffect } from 'react';
import { ComprehensiveQuestion, ComprehensiveQuestionType, EditablePassage } from '@/types';
import PromptModal from './PromptModal';

interface ComprehensiveQuestionsProps {
  editablePassage: EditablePassage;
  division: string;
  comprehensiveQuestions: ComprehensiveQuestion[];
  onUpdate: (questions: ComprehensiveQuestion[], usedPrompt?: string) => void;
  onNext: () => void;
  loading?: boolean;
  currentStep: 'generation' | 'review';
  lastUsedPrompt?: string; // GPTÏóê Î≥¥ÎÇ∏ ÌîÑÎ°¨ÌîÑÌä∏
}

export default function ComprehensiveQuestions({
  editablePassage,
  division,
  comprehensiveQuestions,
  onUpdate,
  onNext,
  loading = false,
  currentStep,
  lastUsedPrompt = ''
}: ComprehensiveQuestionsProps) {
  const [localQuestions, setLocalQuestions] = useState<ComprehensiveQuestion[]>(comprehensiveQuestions);
  
  // Props Î≥ÄÍ≤Ω Ïãú ÎîîÎ≤ÑÍπÖ
  console.log('ComprehensiveQuestions props:', {
    comprehensiveQuestionsLength: comprehensiveQuestions.length,
    localQuestionsLength: localQuestions.length,
    currentStep,
    propsQuestions: comprehensiveQuestions.slice(0, 2).map(q => ({
      id: q.id,
      type: q.type, 
      isSupplementary: q.isSupplementary
    }))
  });
  const [showPromptModal, setShowPromptModal] = useState(false);
  const [selectedQuestionType, setSelectedQuestionType] = useState<ComprehensiveQuestionType>('Random');
  const [generatingComp, setGeneratingComp] = useState(false);
  const [includeSupplementary, setIncludeSupplementary] = useState(true);
  const [questionCount, setQuestionCount] = useState<number>(4);
  const [fastGeneration, setFastGeneration] = useState(false);
  const [generationProgress, setGenerationProgress] = useState<string>('');
  const [generatingSupplementary, setGeneratingSupplementary] = useState(false);

  // propsÍ∞Ä Î≥ÄÍ≤ΩÎê† Îïå localQuestions ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    console.log('useEffect triggered - updating localQuestions from props:', {
      propsLength: comprehensiveQuestions.length,
      localLength: localQuestions.length
    });
    setLocalQuestions(comprehensiveQuestions);
  }, [comprehensiveQuestions]);

  const questionTypeOptions: ComprehensiveQuestionType[] = [
    'Random',
    'Ï†ïÎ≥¥ ÌôïÏù∏',
    'Ï£ºÏ†ú ÌååÏïÖ',
    'ÏûêÎ£åÌï¥ÏÑù',
    'Ï∂îÎ°†'
  ];

  const questionCountOptions = [4, 8, 12];

  // Ï¢ÖÌï© Î¨∏Ï†ú ÏÉùÏÑ± (Í∏∞Ï°¥ Î∞©Ïãù ÎòêÎäî Îπ†Î•∏ ÏÉùÏÑ±)
  const handleGenerateComprehensive = async () => {
    if (fastGeneration && includeSupplementary) {
      await handleFastGenerationWithBackground();
    } else {
      await handleTraditionalGeneration();
    }
  };

  // üöÄ Îπ†Î•∏ ÏÉùÏÑ±: Í∏∞Î≥∏ Î¨∏Ï†úÎßå Î®ºÏ†Ä, Î≥¥ÏôÑ Î¨∏Ï†úÎäî Î∞±Í∑∏ÎùºÏö¥Îìú
  const handleFastGenerationWithBackground = async () => {
    setGeneratingComp(true);
    setGenerationProgress('Í∏∞Î≥∏ Î¨∏Ï†ú ÏÉùÏÑ± Ï§ë...');
    
    try {
      const selectedModel = localStorage.getItem('selectedGPTModel') || 'gpt-4.1';
      
      // ÏßÄÎ¨∏ ÌÖçÏä§Ìä∏ Ï§ÄÎπÑ
      let passageText = '';
      if (editablePassage.passages && editablePassage.passages.length > 0) {
        editablePassage.passages.forEach((passage, index) => {
          passageText += `${passage.title}\n\n`;
          passageText += passage.paragraphs.join('\n\n');
          if (index < editablePassage.passages.length - 1) {
            passageText += '\n\n---\n\n';
          }
        });
      } else {
        passageText = `${editablePassage.title}\n\n${editablePassage.paragraphs.join('\n\n')}`;
      }
      
      // 1Îã®Í≥Ñ: Í∏∞Î≥∏ Î¨∏Ï†úÎßå Îπ†Î•¥Í≤å ÏÉùÏÑ±
      const basicResponse = await fetch('/api/generate-comprehensive-basic', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          passage: passageText,
          division: division,
          questionType: selectedQuestionType,
          questionCount: questionCount,
          model: selectedModel
        }),
      });

      if (!basicResponse.ok) {
        throw new Error('Í∏∞Î≥∏ Î¨∏Ï†ú ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      const basicResult = await basicResponse.json();
      const basicQuestions = basicResult.comprehensiveQuestions || [];
      
      console.log('‚ö° Fast basic questions generated:', basicQuestions.length);
      
      // Í∏∞Î≥∏ Î¨∏Ï†ú Î®ºÏ†Ä ÌëúÏãú
      setLocalQuestions(basicQuestions);
      onUpdate(basicQuestions, basicResult._metadata?.usedPrompt);
      
      setGenerationProgress('Í∏∞Î≥∏ Î¨∏Ï†ú ÏôÑÎ£å! Î≥¥ÏôÑ Î¨∏Ï†ú Î∞±Í∑∏ÎùºÏö¥Îìú ÏÉùÏÑ± Ï§ë...');
      setGeneratingComp(false);
      setGeneratingSupplementary(true);
      
      // 2Îã®Í≥Ñ: Î≥¥ÏôÑ Î¨∏Ï†ú Î∞±Í∑∏ÎùºÏö¥Îìú ÏÉùÏÑ±
      const supplementaryResponse = await fetch('/api/generate-comprehensive-supplementary', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          passage: passageText,
          division: division,
          basicQuestions: basicQuestions,
          model: selectedModel
        }),
      });

      if (supplementaryResponse.ok) {
        const supplementaryResult = await supplementaryResponse.json();
        const supplementaryQuestions = supplementaryResult.supplementaryQuestions || [];
        
        console.log('üîÑ Background supplementary questions generated:', supplementaryQuestions.length);
        
        // Í∏∞Î≥∏ Î¨∏Ï†ú + Î≥¥ÏôÑ Î¨∏Ï†ú Ìï©Ï≥êÏÑú ÏóÖÎç∞Ïù¥Ìä∏
        const allQuestions = [...basicQuestions, ...supplementaryQuestions];
        setLocalQuestions(allQuestions);
        onUpdate(allQuestions, basicResult._metadata?.usedPrompt);
        
        setGenerationProgress(`ÏôÑÎ£å! Í∏∞Î≥∏ ${basicQuestions.length}Í∞ú + Î≥¥ÏôÑ ${supplementaryQuestions.length}Í∞ú ÏÉùÏÑ±Îê®`);
      } else {
        console.error('Î≥¥ÏôÑ Î¨∏Ï†ú ÏÉùÏÑ± Ïã§Ìå®');
        setGenerationProgress(`Í∏∞Î≥∏ ${basicQuestions.length}Í∞ú ÏôÑÎ£å (Î≥¥ÏôÑ Î¨∏Ï†ú ÏÉùÏÑ± Ïã§Ìå®)`);
      }
      
    } catch (error) {
      console.error('Fast generation error:', error);
      alert('Îπ†Î•∏ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      setGenerationProgress('');
    } finally {
      setGeneratingSupplementary(false);
      setTimeout(() => setGenerationProgress(''), 3000); // 3Ï¥à ÌõÑ Î©îÏãúÏßÄ Ï†úÍ±∞
    }
  };

  // üìã Í∏∞Ï°¥ Î∞©Ïãù ÏÉùÏÑ± (Ìïú Î≤àÏóê Î™®Îì† Î¨∏Ï†ú)
  const handleTraditionalGeneration = async () => {
    setGeneratingComp(true);
    setGenerationProgress(includeSupplementary ? 'Í∏∞Î≥∏ + Î≥¥ÏôÑ Î¨∏Ï†ú ÏÉùÏÑ± Ï§ë...' : 'Í∏∞Î≥∏ Î¨∏Ï†ú ÏÉùÏÑ± Ï§ë...');
    
    try {
      const selectedModel = localStorage.getItem('selectedGPTModel') || 'gpt-4.1';
      
      let passageText = '';
      if (editablePassage.passages && editablePassage.passages.length > 0) {
        editablePassage.passages.forEach((passage, index) => {
          passageText += `${passage.title}\n\n`;
          passageText += passage.paragraphs.join('\n\n');
          if (index < editablePassage.passages.length - 1) {
            passageText += '\n\n---\n\n';
          }
        });
      } else {
        passageText = `${editablePassage.title}\n\n${editablePassage.paragraphs.join('\n\n')}`;
      }
      
      const response = await fetch('/api/generate-comprehensive', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          passage: passageText,
          division: division,
          questionType: selectedQuestionType,
          questionCount: questionCount,
          includeSupplementary: includeSupplementary,
          model: selectedModel
        }),
      });

      if (!response.ok) {
        throw new Error('Ï¢ÖÌï© Î¨∏Ï†ú ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      const result = await response.json();
      const questions = result.comprehensiveQuestions || [];
      
      console.log('üìã Traditional generation completed:', {
        totalQuestions: questions.length,
        basicQuestions: questions.filter((q: any) => !q.isSupplementary).length,
        supplementaryQuestions: questions.filter((q: any) => q.isSupplementary).length
      });
      
      setLocalQuestions(questions);
      onUpdate(questions, result._metadata?.usedPrompt);
      setGenerationProgress(`ÏôÑÎ£å! Ï¥ù ${questions.length}Í∞ú Î¨∏Ï†ú ÏÉùÏÑ±Îê®`);
      
    } catch (error) {
      console.error('Traditional generation error:', error);
      alert('Ï¢ÖÌï© Î¨∏Ï†ú ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      setGenerationProgress('');
    } finally {
      setGeneratingComp(false);
      setTimeout(() => setGenerationProgress(''), 3000);
    }
  };

  // Î¨∏Ï†ú ÏàòÏ†ï
  const handleQuestionUpdate = (index: number, field: keyof ComprehensiveQuestion, value: string | string[]) => {
    const updated = [...localQuestions];
    updated[index] = { ...updated[index], [field]: value };
    setLocalQuestions(updated);
    onUpdate(updated);
  };

  // Î¨∏Ï†ú Ï∂îÍ∞Ä
  const addQuestion = () => {
    const newQuestion: ComprehensiveQuestion = {
      id: `comp_new_${Date.now()}`,
      type: 'Ï†ïÎ≥¥ ÌôïÏù∏',
      question: 'ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
      options: ['ÏÑ†ÌÉùÏßÄ 1', 'ÏÑ†ÌÉùÏßÄ 2', 'ÏÑ†ÌÉùÏßÄ 3', 'ÏÑ†ÌÉùÏßÄ 4', 'ÏÑ†ÌÉùÏßÄ 5'],
      answer: 'ÏÑ†ÌÉùÏßÄ 1',
      explanation: 'Ìï¥ÏÑ§ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî'
    };
    
    const updated = [...localQuestions, newQuestion];
    setLocalQuestions(updated);
    onUpdate(updated);
  };

  // Î¨∏Ï†ú ÏÇ≠Ï†ú (Í∏∞Î≥∏ Î¨∏Ï†ú ÏÇ≠Ï†ú Ïãú Î≥¥ÏôÑ Î¨∏Ï†úÎèÑ Ìï®Íªò ÏÇ≠Ï†ú)
  const removeQuestion = (index: number) => {
    if (localQuestions.length <= 1) {
      // ÏµúÏÜå 1Í∞úÏùò Î¨∏Ï†úÎäî ÏûàÏñ¥Ïïº ÌïòÎØÄÎ°ú ÏÇ≠Ï†úÌïòÏßÄ ÏïäÏùå
      return;
    }
    
    const questionToDelete = localQuestions[index];
    let updated = [...localQuestions];
    
    // Í∏∞Î≥∏ Î¨∏Ï†úÏù∏ Í≤ΩÏö∞, Ìï¥Îãπ Î¨∏Ï†úÏùò Î≥¥ÏôÑ Î¨∏Ï†úÎì§ÎèÑ Ìï®Íªò ÏÇ≠Ï†ú
    if (!questionToDelete.isSupplementary) {
      updated = localQuestions.filter((q, i) => {
        // ÏÇ≠Ï†úÌïòÎ†§Îäî Î¨∏Ï†ú ÏûêÏ≤¥ Ï†úÍ±∞
        if (i === index) return false;
        // ÏÇ≠Ï†úÌïòÎ†§Îäî Î¨∏Ï†úÏùò Î≥¥ÏôÑ Î¨∏Ï†úÎì§ Ï†úÍ±∞
        if (q.isSupplementary && q.originalQuestionId === questionToDelete.id) return false;
        return true;
      });
    } else {
      // Î≥¥ÏôÑ Î¨∏Ï†úÏù∏ Í≤ΩÏö∞, Ìï¥Îãπ Î¨∏Ï†úÎßå ÏÇ≠Ï†ú
      updated = localQuestions.filter((_, i) => i !== index);
    }
    
    setLocalQuestions(updated);
    onUpdate(updated);
  };

  // ÏÑ†ÌÉùÏßÄ ÏàòÏ†ï (Í∞ùÍ¥ÄÏãù Î¨∏Ï†úÏö©)
  const handleOptionUpdate = (questionIndex: number, optionIndex: number, value: string) => {
    const updated = [...localQuestions];
    if (updated[questionIndex].options) {
      updated[questionIndex].options![optionIndex] = value;
      setLocalQuestions(updated);
      onUpdate(updated);
    }
  };

  // ÏÑ†ÌÉùÏßÄ Ï∂îÍ∞Ä (Í∞ùÍ¥ÄÏãù Î¨∏Ï†úÏö©)
  const addOption = (questionIndex: number) => {
    const updated = [...localQuestions];
    if (!updated[questionIndex].options) {
      updated[questionIndex].options = [];
    }
    updated[questionIndex].options!.push('ÏÉàÎ°úÏö¥ ÏÑ†ÌÉùÏßÄ');
    setLocalQuestions(updated);
    onUpdate(updated);
  };

  // ÏÑ†ÌÉùÏßÄ Ï†úÍ±∞ (Í∞ùÍ¥ÄÏãù Î¨∏Ï†úÏö©)
  const removeOption = (questionIndex: number, optionIndex: number) => {
    const updated = [...localQuestions];
    if (updated[questionIndex].options && updated[questionIndex].options!.length > 2) {
      updated[questionIndex].options!.splice(optionIndex, 1);
      setLocalQuestions(updated);
      onUpdate(updated);
    }
  };

    if (currentStep === 'generation') {
    return (
      <>
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex justify-between items-center mb-6">
            <div className="flex items-center space-x-4">
              <h2 className="text-xl font-bold text-gray-800">7Îã®Í≥Ñ: Ï¢ÖÌï© Î¨∏Ï†ú ÏÉùÏÑ±</h2>
              <button
                onClick={handleGenerateComprehensive}
                disabled={generatingComp || generatingSupplementary}
                className="bg-orange-600 text-white px-4 py-2 rounded-md hover:bg-orange-700 focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium text-sm"
              >
                {generatingComp 
                  ? (fastGeneration && includeSupplementary ? 'Í∏∞Î≥∏ Î¨∏Ï†ú ÏÉùÏÑ± Ï§ë...' : 'ÏÉùÏÑ± Ï§ë...') 
                  : generatingSupplementary 
                    ? 'Î≥¥ÏôÑ Î¨∏Ï†ú ÏÉùÏÑ± Ï§ë...'
                    : includeSupplementary 
                      ? (fastGeneration ? `‚ö° ${questionCount}Í∞ú Îπ†Î•∏ ÏÉùÏÑ±` : `${questionCount + (questionCount * 2)}Í∞ú ÏÉùÏÑ±`)
                      : `${questionCount}Í∞ú ÏÉùÏÑ±`
                }
              </button>
            </div>
            <span className="text-sm text-orange-600 bg-orange-50 px-3 py-1 rounded-full">
              Î¨∏Ï†ú ÏÉùÏÑ±
            </span>
          </div>

          <div className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">Î¨∏Ï†ú Ïú†Ìòï ÏÑ†ÌÉù</h3>
            <div className="bg-gray-50 p-4 rounded-lg mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Î¨∏Ï†ú ÌòïÌÉú *
              </label>
              <select
                value={selectedQuestionType}
                onChange={(e) => setSelectedQuestionType(e.target.value as ComprehensiveQuestionType)}
                className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              >
                {questionTypeOptions.map((type) => (
                  <option key={type} value={type}>
                    {type}
                  </option>
                ))}
              </select>
              
              <div className="mt-3 text-sm text-gray-600">
                <p><strong>ÏÑ†ÌÉùÎêú Ïú†Ìòï:</strong> {selectedQuestionType}</p>
                {selectedQuestionType === 'Random' ? (
                  <p>‚Ä¢ 4Í∞ÄÏßÄ Ïú†ÌòïÏùÑ Í∞Å {questionCount / 4}Í∞úÏî© Ï¥ù {questionCount}Í∞ú Î¨∏Ï†úÍ∞Ä ÏÉùÏÑ±Îê©ÎãàÎã§.</p>
                ) : (
                  <p>‚Ä¢ {selectedQuestionType} Ïú†ÌòïÏúºÎ°ú {questionCount}Í∞ú Î¨∏Ï†úÍ∞Ä ÏÉùÏÑ±Îê©ÎãàÎã§.</p>
                )}
                {includeSupplementary && (
                  <p className="text-orange-600 font-medium">‚Ä¢ Î≥¥ÏôÑ Î¨∏Ï†ú Ìè¨Ìï® Ïãú Ï¥ù {questionCount + (questionCount * 2)}Í∞ú Î¨∏Ï†úÍ∞Ä ÏÉùÏÑ±Îê©ÎãàÎã§. (Í∏∞Î≥∏ {questionCount}Í∞ú + Î≥¥ÏôÑ {questionCount * 2}Í∞ú)</p>
                )}
              </div>
            </div>
             
            {/* Î¨∏Ï†ú Í∞úÏàò ÏÑ†ÌÉù */}
            <div className="bg-gray-50 p-4 rounded-lg mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Î¨∏Ï†ú Í∞úÏàò *
              </label>
              <select
                value={questionCount}
                onChange={(e) => setQuestionCount(Number(e.target.value))}
                className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              >
                {questionCountOptions.map((count) => (
                  <option key={count} value={count}>
                    {count}Í∞ú
                  </option>
                ))}
              </select>
              <div className="mt-1 text-xs text-gray-600">
                <p>‚Ä¢ ÏÑ†ÌÉùÎêú Ïú†ÌòïÏúºÎ°ú ÏÉùÏÑ±ÎêòÎäî Í∏∞Î≥∏ Î¨∏Ï†ú Í∞úÏàòÏûÖÎãàÎã§.</p>
                {includeSupplementary && (
                  <p>‚Ä¢ Î≥¥ÏôÑ Î¨∏Ï†ú Ìè¨Ìï® Ïãú Ï¥ù Î¨∏Ï†ú Ïàò: Í∏∞Î≥∏ {questionCount}Í∞ú + Î≥¥ÏôÑ {questionCount * 2}Í∞ú = <strong>{questionCount + (questionCount * 2)}Í∞ú</strong></p>
                )}
              </div>
            </div>

            {/* Î≥¥ÏôÑ Î¨∏Ï†ú ÏÑ†ÌÉù */}
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex items-start space-x-3">
                <input
                  type="checkbox"
                  id="supplementary"
                  checked={includeSupplementary}
                  onChange={(e) => setIncludeSupplementary(e.target.checked)}
                  className="w-5 h-5 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 mt-0.5"
                />
                <div className="flex-1">
                  <label htmlFor="supplementary" className="text-sm font-medium text-gray-800 cursor-pointer">
                    Î≥¥ÏôÑ Î¨∏Ï†ú ÏÉùÏÑ±
                  </label>
                  <div className="mt-1 text-xs text-gray-600">
                    <p>‚Ä¢ Ïò§Îãµ Ïãú ÌïôÏäµ Í∞ïÌôîÎ•º ÏúÑÌïú Ï∂îÍ∞Ä Î¨∏Ï†úÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§</p>
                    <p>‚Ä¢ Í∞Å Í∏∞Î≥∏ Î¨∏Ï†úÎãπ 2Í∞úÏùò Î≥¥ÏôÑ Î¨∏Ï†úÍ∞Ä Ï∂îÍ∞ÄÎ°ú ÏÉùÏÑ±Îê©ÎãàÎã§</p>
                    <p>‚Ä¢ Ï¥ù Î¨∏Ï†ú Ïàò: Í∏∞Î≥∏ {questionCount}Í∞ú + Î≥¥ÏôÑ {questionCount * 2}Í∞ú = <strong>{questionCount + (questionCount * 2)}Í∞ú</strong></p>
                  </div>
                </div>
              </div>
            </div>

            {/* üöÄ Îπ†Î•∏ ÏÉùÏÑ± ÏòµÏÖò (Î≥¥ÏôÑ Î¨∏Ï†úÍ∞Ä Ï≤¥ÌÅ¨Îêú Í≤ΩÏö∞Îßå ÌëúÏãú) */}
            {includeSupplementary && (
              <div className="bg-green-50 p-4 rounded-lg border-l-4 border-green-400">
                <div className="flex items-start space-x-3">
                  <input
                    type="checkbox"
                    id="fastGeneration"
                    checked={fastGeneration}
                    onChange={(e) => setFastGeneration(e.target.checked)}
                    className="w-5 h-5 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 mt-0.5"
                  />
                  <div className="flex-1">
                    <label htmlFor="fastGeneration" className="text-sm font-medium text-gray-800 cursor-pointer flex items-center gap-2">
                      <span>‚ö° Îπ†Î•∏ ÏÉùÏÑ± (Í∂åÏû•)</span>
                      <span className="bg-green-100 text-green-700 text-xs px-2 py-0.5 rounded-full">NEW</span>
                    </label>
                    <div className="mt-1 text-xs text-gray-600">
                      <p className="text-green-700 font-medium">‚Ä¢ Í∏∞Î≥∏ Î¨∏Ï†úÎ•º Î®ºÏ†Ä Îπ†Î•¥Í≤å ÏÉùÏÑ±ÌïòÏó¨ Ï¶âÏãú ÌôïÏù∏ Í∞ÄÎä•</p>
                      <p>‚Ä¢ Î≥¥ÏôÑ Î¨∏Ï†úÎäî Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏÉùÏÑ± (ÌÉÄÏûÑÏïÑÏõÉ Î∞©ÏßÄ)</p>
                      <p>‚Ä¢ ÏòàÏÉÅ ÎåÄÍ∏∞ÏãúÍ∞Ñ: 15-20Ï¥à (Í∏∞Ï°¥ 60Ï¥à+ ‚Üí ÎåÄÌè≠ Îã®Ï∂ï)</p>
                      <p className="text-orange-600">‚Ä¢ Vercel ÌÉÄÏûÑÏïÑÏõÉ Î¨∏Ï†ú Ìï¥Í≤∞ÏùÑ ÏúÑÌïú ÏµúÏ†ÅÌôîÎêú Î∞©Ïãù</p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* ÏßÑÌñâ ÏÉÅÌô© ÌëúÏãú */}
            {(generationProgress || generatingSupplementary) && (
              <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
                <div className="flex items-center space-x-3">
                  <div className="w-4 h-4 border-2 border-yellow-500 border-t-transparent rounded-full animate-spin"></div>
                  <div className="flex-1">
                    <p className="text-sm font-medium text-yellow-800">
                      {generationProgress || 'Ï≤òÎ¶¨ Ï§ë...'}
                    </p>
                    {generatingSupplementary && (
                      <p className="text-xs text-yellow-600 mt-1">
                        Î≥¥ÏôÑ Î¨∏Ï†úÎäî Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏÉùÏÑ± Ï§ëÏûÖÎãàÎã§. Í∏∞Î≥∏ Î¨∏Ï†úÎ∂ÄÌÑ∞ Í≤ÄÌÜ†ÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§.
                      </p>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>

          <div className="flex justify-center">
            <button
              onClick={handleGenerateComprehensive}
              disabled={generatingComp || generatingSupplementary}
              className="bg-orange-600 text-white px-8 py-3 rounded-md hover:bg-orange-700 focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium"
            >
              {generatingComp 
                ? (fastGeneration && includeSupplementary ? 'Í∏∞Î≥∏ Î¨∏Ï†ú ÏÉùÏÑ± Ï§ë...' : 'Ï¢ÖÌï© Î¨∏Ï†ú ÏÉùÏÑ± Ï§ë...') 
                : generatingSupplementary 
                  ? 'Î≥¥ÏôÑ Î¨∏Ï†ú Î∞±Í∑∏ÎùºÏö¥Îìú ÏÉùÏÑ± Ï§ë...'
                  : includeSupplementary 
                    ? (fastGeneration 
                        ? `‚ö° ${questionCount}Í∞ú Ï¢ÖÌï© Î¨∏Ï†ú Îπ†Î•¥Í≤å ÏÉùÏÑ±ÌïòÍ∏∞`
                        : `${questionCount + (questionCount * 2)}Í∞ú Ï¢ÖÌï© Î¨∏Ï†ú ÏÉùÏÑ±ÌïòÍ∏∞ (Î≥¥ÏôÑ Î¨∏Ï†ú Ìè¨Ìï®)`)
                    : `${questionCount}Í∞ú Ï¢ÖÌï© Î¨∏Ï†ú ÏÉùÏÑ±ÌïòÍ∏∞`
              }
            </button>
          </div>
        </div>

        {/* Ï¢ÖÌï© Î¨∏Ï†ú ÏÉùÏÑ± Î°úÎî© Î™®Îã¨ */}
        {(generatingComp || generatingSupplementary) && (
          <div 
            className="fixed inset-0 flex items-center justify-center z-50"
            style={{ backgroundColor: 'rgba(0, 0, 0, 0.5)' }}
          >
            <div className="bg-white backdrop-blur-sm p-8 rounded-xl shadow-lg border border-gray-100 text-center max-w-md">
              {/* Î°úÎî© Ïä§ÌîºÎÑà */}
              <div className={`w-12 h-12 border-3 border-gray-200 ${generatingSupplementary ? 'border-t-green-600' : 'border-t-orange-600'} rounded-full animate-spin mx-auto mb-4`}></div>
              
              {/* Î©îÏãúÏßÄ */}
              <h3 className={`text-lg font-medium mb-1 ${generatingSupplementary ? 'text-green-800' : 'text-gray-800'}`}>
                {generatingComp 
                  ? (fastGeneration && includeSupplementary ? '‚ö° Í∏∞Î≥∏ Î¨∏Ï†ú Îπ†Î•∏ ÏÉùÏÑ± Ï§ë' : 'Ï¢ÖÌï© Î¨∏Ï†ú ÏÉùÏÑ± Ï§ë')
                  : 'üîÑ Î≥¥ÏôÑ Î¨∏Ï†ú Î∞±Í∑∏ÎùºÏö¥Îìú ÏÉùÏÑ± Ï§ë'
                }
              </h3>
              
              <p className="text-sm text-gray-500 mb-2">
                {generatingComp 
                  ? (fastGeneration && includeSupplementary 
                      ? `${questionCount}Í∞ú Í∏∞Î≥∏ Î¨∏Ï†úÎ•º Î®ºÏ†Ä Îπ†Î•¥Í≤å ÏÉùÏÑ±Ìï©ÎãàÎã§`
                      : includeSupplementary 
                        ? `${questionCount}Í∞ú Í∏∞Î≥∏ Î¨∏Ï†ú + ${questionCount * 2}Í∞ú Î≥¥ÏôÑ Î¨∏Ï†úÎ•º ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§`
                        : `${questionCount}Í∞ú Ï¢ÖÌï© Î¨∏Ï†úÎ•º ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§`)
                  : `${questionCount * 2}Í∞ú Î≥¥ÏôÑ Î¨∏Ï†úÎ•º Î∞∞Í≤ΩÏóêÏÑú ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§`
                }
              </p>
              
              <p className="text-xs text-gray-400">
                {generatingComp 
                  ? (fastGeneration && includeSupplementary 
                      ? 'Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî (ÏòàÏÉÅ: 15-20Ï¥à)'
                      : 'Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî')
                  : 'Í∏∞Î≥∏ Î¨∏Ï†úÎäî Ïù¥ÎØ∏ ÏôÑÏÑ±ÎêòÏóàÏäµÎãàÎã§. Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Î≥¥ÏôÑ Î¨∏Ï†úÎ•º Ï∂îÍ∞Ä ÏÉùÏÑ± Ï§ëÏûÖÎãàÎã§.'
                }
              </p>
              
              {generationProgress && (
                <div className="mt-3 p-2 bg-yellow-50 rounded-md">
                  <p className="text-sm text-yellow-800">{generationProgress}</p>
                </div>
              )}
            </div>
          </div>
        )}
      </>
    );
  }

  // currentStep === 'review'
  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center space-x-4">
          <h2 className="text-xl font-bold text-gray-800">8Îã®Í≥Ñ: Ï¢ÖÌï© Î¨∏Ï†ú Í≤ÄÌÜ† Î∞è ÏàòÏ†ï</h2>
          <button
            onClick={onNext}
            disabled={loading || localQuestions.length === 0}
            className="bg-orange-600 text-white px-4 py-2 rounded-md hover:bg-orange-700 focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium text-sm"
          >
            {loading ? 'Ï≤òÎ¶¨ Ï§ë...' : '9Îã®Í≥Ñ: ÏµúÏ¢Ö Ï†ÄÏû•ÌïòÍ∏∞'}
          </button>
        </div>
        <div className="flex items-center space-x-2">
          {lastUsedPrompt && (
            <button
              onClick={() => setShowPromptModal(true)}
              className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-2 rounded-md transition-colors font-medium text-sm flex items-center space-x-1"
              title="Ï¢ÖÌï© Î¨∏Ï†ú ÏÉùÏÑ±Ïóê ÏÇ¨Ïö©Îêú ÌîÑÎ°¨ÌîÑÌä∏ ÌôïÏù∏"
            >
              <span>üìã</span>
              <span>ÌîÑÎ°¨ÌîÑÌä∏ ÌôïÏù∏</span>
            </button>
          )}
          <span className="text-sm text-orange-600 bg-orange-50 px-3 py-1 rounded-full">
            Í≤ÄÌÜ† Î∞è ÏàòÏ†ï
          </span>
        </div>
      </div>

      <div className="mb-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold text-gray-800">
            Ï¢ÖÌï© Î¨∏Ï†ú ({localQuestions.length}Í∞ú)
          </h3>
          <button
            onClick={addQuestion}
            className="bg-green-100 text-green-700 px-4 py-2 rounded-md hover:bg-green-200 transition-colors text-sm font-medium"
          >
            + Î¨∏Ï†ú Ï∂îÍ∞Ä
          </button>
        </div>

        {/* Î¨∏Ï†ú Ïú†ÌòïÎ≥Ñ Î∂ÑÎ•ò ÌëúÏãú */}
        <div className="mb-4 p-3 bg-gray-50 rounded-lg">
          <h4 className="text-sm font-medium text-gray-700 mb-2">Î¨∏Ï†ú Ïú†ÌòïÎ≥Ñ Î∂ÑÌè¨</h4>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-xs mb-3">
            {['Ï†ïÎ≥¥ ÌôïÏù∏', 'Ï£ºÏ†ú ÌååÏïÖ', 'ÏûêÎ£åÌï¥ÏÑù', 'Ï∂îÎ°†'].map(type => {
              const count = localQuestions.filter(q => q.type === type).length;
              const supplementaryCount = localQuestions.filter(q => q.type === type && q.isSupplementary).length;
              const mainCount = count - supplementaryCount;
              return (
                <div key={type} className="bg-white p-2 rounded text-center">
                  <div className="font-medium">{type}</div>
                  <div className="text-gray-600">{count}Í∞ú</div>
                  {supplementaryCount > 0 && (
                    <div className="text-xs text-blue-600">
                      (Í∏∞Î≥∏ {mainCount}Í∞ú + Î≥¥ÏôÑ {supplementaryCount}Í∞ú)
                    </div>
                  )}
                </div>
              );
            })}
          </div>
          {localQuestions.some(q => q.isSupplementary) && (
            <div className="text-xs text-center text-gray-600 bg-white p-2 rounded">
              Ï¥ù {localQuestions.length}Í∞ú Î¨∏Ï†ú (Í∏∞Î≥∏ {localQuestions.filter(q => !q.isSupplementary).length}Í∞ú + Î≥¥ÏôÑ {localQuestions.filter(q => q.isSupplementary).length}Í∞ú)
            </div>
          )}
        </div>

        <div className="space-y-6">
          {(() => {
            // Í∏∞Î≥∏ Î¨∏Ï†úÏôÄ Ìï¥Îãπ Î≥¥ÏôÑ Î¨∏Ï†úÎì§ÏùÑ Í∑∏Î£πÏúºÎ°ú Ï†ïÎ†¨
            const basicQuestions = localQuestions.filter(q => !q.isSupplementary);
            const supplementaryQuestions = localQuestions.filter(q => q.isSupplementary);
            
            // ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏
            console.log('ComprehensiveQuestions Debug:', {
              totalQuestions: localQuestions.length,
              basicQuestions: basicQuestions.length,
              supplementaryQuestions: supplementaryQuestions.length,
              questions: localQuestions.map(q => ({
                id: q.id,
                type: q.type,
                isSupplementary: q.isSupplementary,
                question: q.question.substring(0, 30) + '...'
              }))
            });
            
            // Í∏∞Î≥∏ Î¨∏Ï†ú ÏàúÏÑúÎåÄÎ°ú Î∞∞ÏπòÌïòÎêò, Í∞Å Í∏∞Î≥∏ Î¨∏Ï†ú Î∞îÎ°ú Îí§Ïóê Ìï¥Îãπ Î≥¥ÏôÑ Î¨∏Ï†úÎì§ Î∞∞Ïπò
            const orderedQuestions: ComprehensiveQuestion[] = [];
            
            basicQuestions.forEach(basicQ => {
              // Í∏∞Î≥∏ Î¨∏Ï†ú Î®ºÏ†Ä Ï∂îÍ∞Ä
              orderedQuestions.push(basicQ);
              
              // Ìï¥Îãπ Í∏∞Î≥∏ Î¨∏Ï†úÏùò Î≥¥ÏôÑ Î¨∏Ï†úÎì§ Ï∞æÏïÑÏÑú Ï∂îÍ∞Ä
              const relatedSupplementary = supplementaryQuestions.filter(
                supQ => supQ.originalQuestionId === basicQ.id
              );
              orderedQuestions.push(...relatedSupplementary);
            });
            
            return orderedQuestions.map((question) => {
              // Î≥¥ÏôÑ Î¨∏Ï†úÏù∏ Í≤ΩÏö∞ ÏõêÎ≥∏ Î¨∏Ï†ú Ï†ïÎ≥¥ ÌëúÏãú
              const originalQuestion = question.isSupplementary 
                ? localQuestions.find(q => q.id === question.originalQuestionId)
                : null;
              
              // Í∏∞Î≥∏ Î¨∏Ï†ú Î≤àÌò∏ Í≥ÑÏÇ∞ (Î≥¥ÏôÑ Î¨∏Ï†úÎäî Í∏∞Î≥∏ Î¨∏Ï†ú Î≤àÌò∏Î•º Ï∞∏Ï°∞)
              const basicQuestionNumber = question.isSupplementary
                ? basicQuestions.findIndex(q => q.id === question.originalQuestionId) + 1
                : basicQuestions.findIndex(q => q.id === question.id) + 1;
            
            return (
              <div key={question.id} className={`border rounded-lg p-4 ${
                question.isSupplementary 
                  ? 'border-blue-200 bg-blue-50 ml-6' 
                  : 'border-orange-200 bg-orange-50'
              }`}>
                <div className="flex justify-between items-start mb-4">
                  <div className="flex items-center gap-3">
                    <h4 className="text-md font-medium text-gray-800">
                      {question.isSupplementary 
                        ? `üìö Î≥¥ÏôÑ Î¨∏Ï†ú (${originalQuestion?.type || 'Ïïå Ïàò ÏóÜÏùå'} Ïú†Ìòï)` 
                        : `üéØ Í∏∞Î≥∏ Î¨∏Ï†ú ${basicQuestionNumber}`
                      }
                    </h4>
                    <span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                      {question.type}
                    </span>
                    {question.isSupplementary && (
                      <span className="text-xs bg-blue-100 text-blue-600 px-2 py-1 rounded font-medium">
                        Î≥¥ÏôÑ Î¨∏Ï†ú
                      </span>
                    )}
                    {originalQuestion && (
                      <span className="text-xs bg-yellow-100 text-yellow-700 px-2 py-1 rounded">
                        ‚Üí Í∏∞Î≥∏ Î¨∏Ï†ú: {originalQuestion.question.substring(0, 20)}...
                      </span>
                    )}
                  </div>
                  <button
                    onClick={() => {
                      // Ïã§Ï†ú localQuestions Î∞∞Ïó¥ÏóêÏÑúÏùò Ïù∏Îç±Ïä§Î•º Ï∞æÏïÑ ÏÇ≠Ï†ú
                      const actualIndex = localQuestions.findIndex(q => q.id === question.id);
                      if (actualIndex !== -1) {
                        removeQuestion(actualIndex);
                      }
                    }}
                    className="text-red-500 hover:text-red-700 text-sm"
                    title="Î¨∏Ï†ú ÏÇ≠Ï†ú"
                  >
                    ‚úï ÏÇ≠Ï†ú
                  </button>
                </div>

              {/* Î¨∏Ï†ú Ïú†Ìòï Î≥ÄÍ≤Ω */}
              <div className="mb-3">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Î¨∏Ï†ú Ïú†Ìòï
                </label>
                <select
                  value={question.type}
                  onChange={(e) => {
                    const actualIndex = localQuestions.findIndex(q => q.id === question.id);
                    if (actualIndex !== -1) {
                      handleQuestionUpdate(actualIndex, 'type', e.target.value);
                    }
                  }}
                  className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-orange-500 focus:border-transparent text-sm"
                >
                  <option value="Ï†ïÎ≥¥ ÌôïÏù∏">Ï†ïÎ≥¥ ÌôïÏù∏</option>
                  <option value="Ï£ºÏ†ú ÌååÏïÖ">Ï£ºÏ†ú ÌååÏïÖ</option>
                  <option value="ÏûêÎ£åÌï¥ÏÑù">ÏûêÎ£åÌï¥ÏÑù</option>
                  <option value="Ï∂îÎ°†">Ï∂îÎ°†</option>
                </select>
              </div>

              {/* ÏßàÎ¨∏ */}
              <div className="mb-3">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  ÏßàÎ¨∏
                </label>
                <textarea
                  value={question.question}
                  onChange={(e) => {
                    const actualIndex = localQuestions.findIndex(q => q.id === question.id);
                    if (actualIndex !== -1) {
                      handleQuestionUpdate(actualIndex, 'question', e.target.value);
                    }
                  }}
                  className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-orange-500 focus:border-transparent text-sm min-h-[80px] resize-vertical"
                  placeholder="ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
              </div>

              {/* ÏÑ†ÌÉùÏßÄ (ÏÉàÎ°úÏö¥ Ïú†ÌòïÎì§ÏùÄ Î™®Îëê Í∞ùÍ¥ÄÏãù) */}
              <div className="mb-3">
                  <div className="flex justify-between items-center mb-1">
                    <label className="block text-sm font-medium text-gray-700">
                      ÏÑ†ÌÉùÏßÄ
                    </label>
                    <button
                      onClick={() => {
                        const actualIndex = localQuestions.findIndex(q => q.id === question.id);
                        if (actualIndex !== -1) {
                          addOption(actualIndex);
                        }
                      }}
                      className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded hover:bg-blue-200"
                    >
                      + ÏÑ†ÌÉùÏßÄ Ï∂îÍ∞Ä
                    </button>
                  </div>
                  <div className="space-y-2">
                    {question.options?.map((option, oIndex) => (
                      <div key={oIndex} className="flex items-center gap-2">
                        <span className="text-sm text-gray-500 min-w-[20px]">
                          {oIndex + 1}.
                        </span>
                        <input
                          type="text"
                          value={option}
                          onChange={(e) => {
                            const actualIndex = localQuestions.findIndex(q => q.id === question.id);
                            if (actualIndex !== -1) {
                              handleOptionUpdate(actualIndex, oIndex, e.target.value);
                            }
                          }}
                          className="flex-1 p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-orange-500 focus:border-transparent text-sm"
                          placeholder={`ÏÑ†ÌÉùÏßÄ ${oIndex + 1}`}
                        />
                        <button
                          onClick={() => {
                            const actualIndex = localQuestions.findIndex(q => q.id === question.id);
                            if (actualIndex !== -1) {
                              removeOption(actualIndex, oIndex);
                            }
                          }}
                          className="text-red-500 hover:text-red-700 text-sm px-2"
                          title="ÏÑ†ÌÉùÏßÄ ÏÇ≠Ï†ú"
                        >
                          ‚úï
                        </button>
                      </div>
                    )) || (
                      <button
                        onClick={() => {
                          const actualIndex = localQuestions.findIndex(q => q.id === question.id);
                          if (actualIndex !== -1) {
                            const updated = [...localQuestions];
                            updated[actualIndex].options = ['ÏÑ†ÌÉùÏßÄ 1', 'ÏÑ†ÌÉùÏßÄ 2', 'ÏÑ†ÌÉùÏßÄ 3', 'ÏÑ†ÌÉùÏßÄ 4', 'ÏÑ†ÌÉùÏßÄ 5'];
                            setLocalQuestions(updated);
                            onUpdate(updated);
                          }
                        }}
                        className="w-full p-2 border-2 border-dashed border-gray-300 rounded-md text-gray-500 hover:border-gray-400"
                      >
                        + ÏÑ†ÌÉùÏßÄ Ï∂îÍ∞ÄÌïòÍ∏∞
                      </button>
                    )}
                  </div>
                </div>

              {/* Ï†ïÎãµ */}
              <div className="mb-3">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Ï†ïÎãµ
                </label>
                <select
                  value={question.answer}
                  onChange={(e) => {
                    const actualIndex = localQuestions.findIndex(q => q.id === question.id);
                    if (actualIndex !== -1) {
                      handleQuestionUpdate(actualIndex, 'answer', e.target.value);
                    }
                  }}
                  className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-orange-500 focus:border-transparent text-sm"
                >
                  {question.options?.map((option, index) => (
                    <option key={index} value={option}>
                      {index + 1}. {option}
                    </option>
                  )) || <option value="">ÏÑ†ÌÉùÏßÄÎ•º Î®ºÏ†Ä Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî</option>}
                </select>
              </div>

              {/* Ìï¥ÏÑ§ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Ìï¥ÏÑ§
                </label>
                <textarea
                  value={question.explanation}
                  onChange={(e) => {
                    const actualIndex = localQuestions.findIndex(q => q.id === question.id);
                    if (actualIndex !== -1) {
                      handleQuestionUpdate(actualIndex, 'explanation', e.target.value);
                    }
                  }}
                  className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-orange-500 focus:border-transparent text-sm min-h-[60px] resize-vertical"
                  placeholder="Ìï¥ÏÑ§ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
              </div>
            </div>
          );
        });
          })()}
        </div>
      </div>

      {/* Îã§Ïùå Îã®Í≥Ñ Î≤ÑÌäº */}
      <div className="flex justify-center pt-4 border-t">
        <button
          onClick={onNext}
          disabled={loading || localQuestions.length === 0}
          className="bg-orange-600 text-white px-6 py-2 rounded-md hover:bg-orange-700 focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium"
        >
          {loading ? 'Ï≤òÎ¶¨ Ï§ë...' : '7Îã®Í≥Ñ: ÏµúÏ¢Ö Ï†ÄÏû•ÌïòÍ∏∞'}
        </button>
      </div>

      {/* ÌîÑÎ°¨ÌîÑÌä∏ ÌôïÏù∏ Î™®Îã¨ */}
      <PromptModal
        isOpen={showPromptModal}
        onClose={() => setShowPromptModal(false)}
        title="Ï¢ÖÌï© Î¨∏Ï†ú ÏÉùÏÑ± ÌîÑÎ°¨ÌîÑÌä∏"
        prompt={lastUsedPrompt}
        stepName="8Îã®Í≥Ñ: Ï¢ÖÌï© Î¨∏Ï†ú Í≤ÄÌÜ†"
      />
    </div>
  );
}
